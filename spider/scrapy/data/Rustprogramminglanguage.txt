**Rust** is a multi-paradigm system programming language[14] focused on
safety, especially safe concurrency.[15][16] Rust is syntactically similar to
C++,[17] but is designed to provide better memory safety while maintaining
high performance.

Rust was originally designed by Graydon Hoare at Mozilla Research, with
contributions from Dave Herman, Brendan Eich, and others.[18][19] The
designers refined the language while writing the Servo layout or browser
engine[20] and the Rust compiler. The compiler is free and open-source
software dual-licensed under the MIT License and Apache License 2.0.

Rust was the "most loved programming language" in the Stack Overflow Developer
Survey for 2016, 2017, 2018, and 2019.[21][22][23][24]

Rust is intended to be a language for highly concurrent and highly safe
systems,[25] and _programming in the large_ , that is, creating and
maintaining boundaries that preserve large-system integrity.[26] This has led
to a feature set with an emphasis on safety, control of memory layout, and
concurrency.

Performance of idiomatic Rust is comparable to the performance of idiomatic
C++.[27][28]

The concrete syntax of Rust is similar to C and C++, with blocks of code
delimited by curly brackets, and control flow keywords such as `if`, `else`,
`while`, and `for`. Not all C or C++ keywords are implemented, however, and
some Rust functions (such as the use of the keyword `match` for pattern
matching) will be less familiar to those versed in these languages. Despite
the superficial resemblance to C and C++, the syntax of Rust in a deeper sense
is closer to that of the ML family of languages and the Haskell language.
Nearly every part of a function body is an expression,[29] even control flow
operators. For example, the ordinary `if` expression also takes the place of
C's ternary conditional. A function need not end with a `return` expression:
in this case the last expression in the function creates the return value.

The system is designed to be memory safe, and it does not permit null
pointers, dangling pointers, or data races in safe code.[30][31][32][33] Data
values can only be initialized through a fixed set of forms, all of which
require their inputs to be already initialized.[34] To replicate the function
in other languages of pointers being either valid or `NULL`, such as in linked
list or binary tree data structures, the Rust core library provides an option
type, which can be used to test if a pointer has `Some` value or `None`.[31]
Rust also introduces added syntax to manage lifetimes, and the compiler
reasons about these through its _borrow checker_.

Rust does not use an automated garbage collection system like those used by
Go, Java, or the .NET Framework. Instead, memory and other resources are
managed through the _resource acquisition is initialization_ (RAII)
convention, with optional reference counting. Rust provides deterministic
management of resources, with very low overhead.[ _citation needed_ ] Rust
also favors stack allocation of values and does not perform implicit boxing.

There is also a concept of references (using the `&` symbol), which do not
involve run-time reference counting. The safety of using such pointers is
verified at compile time by the borrow checker, preventing dangling pointers
and other forms of undefined behavior.

Rust has an ownership system where all values have a unique owner, where the
scope of the value is the same as the scope of the owner.[35][36] Values can
be passed by immutable reference using `&T`, by mutable reference using `&mut
T` or by value using `T`. At all times, there can either be multiple immutable
references or one mutable reference. The Rust compiler enforces these rules at
compile time and also checks that all references are valid.

The type system supports a mechanism similar to type classes, called "traits",
inspired directly by the Haskell language. This is a facility for ad hoc
polymorphism, achieved by adding constraints to type variable declarations.
Other features from Haskell, such as higher-kinded polymorphism, are not yet
supported.

Rust features type inference, for variables declared with the keyword `let`.
Such variables do not require a value to be initially assigned to determine
their type. A compile-time error results if any branch of code fails to assign
a value to the variable.[37] Variables assigned multiple times must be marked
with the keyword `mut`.

Functions can be given generic parameters, which usually require the generic
type to implement a certain trait or traits. Within such a function, the
generic value can only be used through those traits. This means that a generic
function can be type-checked as soon as it is defined. This is in contrast to
C++ templates, which are fundamentally duck typed and cannot be checked until
instantiated with concrete types. C++ concepts address the same issue and are
expected to be part of C++20 (2020).

However, the _implementation_ of Rust generics is similar to the typical
implementation of C++ templates: a separate copy of the code is generated for
each instantiation. This is called monomorphization and contrasts with the
type erasure scheme typically used in Java and Haskell. The benefit of
monomorphization is optimized code for each specific use case; the drawback is
increased compile time and size of the resulting binaries.

The object system within Rust is based around implementations, traits and
structured types. Implementations fulfill a role similar to that of classes
within other languages, and are defined with the keyword `impl`. Inheritance
and polymorphism are provided by traits; they allow methods to be defined and
mixed in to implementations. Structured types are used to define fields.
Implementations and traits cannot define fields themselves, and only traits
can provide inheritance. Among other benefits, this prevents the diamond
problem of multiple inheritance, as in C++. In other words, Rust supports
interface inheritance, but replaces implementation inheritance with
composition; see composition over inheritance.

The language grew out of a personal project begun in 2006 by Mozilla employee
Graydon Hoare,[16] who stated that the project was possibly named after the
rust family of fungi.[38] Mozilla began sponsoring the project in 2009[16] and
announced it in 2010.[39][40] The same year, work shifted from the initial
compiler (written in OCaml) to the self-hosting compiler written in Rust.[41]
Named rustc, it successfully compiled itself in 2011.[42] rustc uses LLVM as
its back end.

The first numbered pre-alpha release of the Rust compiler occurred in January
2012.[43] Rust 1.0, the first stable release, was released on May 15,
2015.[44][45] Following 1.0, stable point releases are delivered every six
weeks, while features are developed in nightly Rust and then tested with alpha
and beta releases that last six weeks.[46]

Along with conventional static typing, before version 0.4, Rust also supported
typestates. The typestate system modeled assertions before and after program
statements, through use of a special `check` statement. Discrepancies could be
discovered at compile time, rather than when a program was running, as might
be the case with assertions in C or C++ code. The typestate concept was not
unique to Rust, as it was first introduced in the language NIL.[47] Typestates
were removed because in practice they were little used, though the same
function can still be achieved with a _branding pattern_.[48]

The style of the object system changed considerably within versions 0.2, 0.3
and 0.4 of Rust. Version 0.2 introduced classes for the first time, with
version 0.3 adding several features including destructors and polymorphism
through the use of interfaces. In Rust 0.4, traits were added as a means to
provide inheritance; interfaces were unified with traits and removed as a
separate feature. Classes were also removed, replaced by a combination of
implementations and structured types.[ _citation needed_ ]

Starting in Rust 0.9 and ending in Rust 0.11, Rust had two built-in pointer
types, `~` and `@`, simplifying the core memory model. It reimplemented those
pointer types in the standard library as `Box` and (the now removed) `Gc`.

In January 2014, the editor-in-chief of _Dr Dobb's_ , Andrew Binstock,
commented on Rust's chances to become a competitor to C++, and to the other
upcoming languages D, Go and Nim (then Nimrod). According to Binstock, while
Rust was "widely viewed as a remarkably elegant language", adoption slowed
because it changed repeatedly between versions.[49]

Rust was the third-most-loved programming language in the 2015 Stack Overflow
annual survey,[50] and took first place in 2016, 2017, 2018, and
2019.[51][52][53][54]

The language is referenced in _The Book of Mozilla_ as "oxidised metal".[55]

Here is a simple "Hello, World!" program written in Rust. The `println!` macro
prints the message to standard output.

A Web browser and several related components are being written in Rust,
including:

Many operating systems (OS) and related components are being written in Rust.
As of January 2019, the OSes included: BlogOS, intermezzOS, QuiltOS, Redox,
RustOS, Rux, Tefflin, and Tock.[60] Wikipedia articles exist on:

  

